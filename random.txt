public class NetworkTypeDTO {
    private String networkTypeName;

    // Getters and Setters
}


  private List<NetworkTypeDTO> networkType; // Updated field
  
  
    @Value("${network.type.options}")
    private String networkTypeOptions;
	
	
            // Set networkType if provided
            if (userRequestDTO.getNetworkType() != null) {
                List<String> validNetworkTypes = Arrays.asList(networkTypeOptions.split(","));
                List<String> requestedNetworkTypes = userRequestDTO.getNetworkType().stream()
                        .map(NetworkTypeDTO::getNetworkTypeName)
                        .collect(Collectors.toList());
                for (String type : requestedNetworkTypes) {
                    if (!validNetworkTypes.contains(type)) {
                        throw new IllegalArgumentException("Invalid network type: " + type);
                    }
                }
                user.setNetworkType(requestedNetworkTypes);
            }
			
			
			
            // Update the networkType
            if (userRequestDTO.getNetworkType() != null) {
                List<String> validNetworkTypes = Arrays.asList(networkTypeOptions.split(","));
                List<String> requestedNetworkTypes = userRequestDTO.getNetworkType().stream()
                        .map(NetworkTypeDTO::getNetworkTypeName)
                        .collect(Collectors.toList());
                for (String type : requestedNetworkTypes) {
                    if (!validNetworkTypes.contains(type)) {
                        throw new IllegalArgumentException("Invalid network type: " + type);
                    }
                }
                user.setNetworkType(requestedNetworkTypes);
            }
			
			
			
			 userDTO.setNetworkType(user.getNetworkType().stream().map(networkTypeName -> {
        NetworkTypeDTO networkTypeDTO = new NetworkTypeDTO();
        networkTypeDTO.setNetworkTypeName(networkTypeName);
        return networkTypeDTO;
    }).collect(Collectors.toList()));
			
			
			