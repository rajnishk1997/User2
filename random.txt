@Service
public class ProjectTATService {

    @Autowired
    private ProjectEventDetailsRepository eventDetailsRepository;

    @Autowired
    private RXSOTProjectDetailRepository projectDetailRepository;

    public void calculateAndStoreTAT(Long sotId) {
        // Fetch events for the project sorted by dateTime
        List<ProjectEventDetails> events = eventDetailsRepository.findBySotIdOrderByDateTimeAsc(sotId);
        if (events.isEmpty()) {
            throw new IllegalStateException("No events found for SOT ID: " + sotId);
        }

        Long totalTATMinutes = 0L;
        Date startDateTime = null;

        for (ProjectEventDetails event : events) {
            if ("WIP".equals(event.getStatus())) {
                // Start of a new iteration
                if (startDateTime == null) {
                    startDateTime = event.getDateTime();
                }
            } else {
                // End of the current iteration
                if (startDateTime != null) {
                    Date endDateTime = event.getDateTime();
                    totalTATMinutes += Duration.between(
                            startDateTime.toInstant(), endDateTime.toInstant()
                    ).toMinutes();
                    startDateTime = null; // Reset for the next iteration
                }
            }
        }

        // If still in WIP, add duration until the current time
        if (startDateTime != null) {
            Date endDateTime = new Date(); // Current system time
            totalTATMinutes += Duration.between(
                    startDateTime.toInstant(), endDateTime.toInstant()
            ).toMinutes();
        }

        // Store TAT in the project detail
        RXSOTProjectDetail projectDetail = projectDetailRepository.findBySotId(sotId)
                .orElseThrow(() -> new ResourceNotFoundException("Project not found for SOT ID: " + sotId));
        projectDetail.setTatInMinutes(totalTATMinutes);
        projectDetailRepository.save(projectDetail);
    }
}


------------------------------------------

@Repository
public interface ProjectEventDetailsRepository extends JpaRepository<ProjectEventDetails, Long> {
    List<ProjectEventDetails> findBySotIdOrderByDateTimeAsc(Long sotId);
}

@Repository
public interface RXSOTProjectDetailRepository extends JpaRepository<RXSOTProjectDetail, Long> {
    Optional<RXSOTProjectDetail> findBySotId(Long sotId);
}



-----------------
  // Trigger TAT calculation for this SOT ID
        projectTATService.calculateAndStoreTAT(request.getSotId());