public List<String> getPermissionOrder() {
        return Arrays.asList(permissions.split(",\\s*")); // Split by comma and optional space
    }
	
	
	import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public void createRoleAndPermissionInfo(User user) {
    // Assuming PermissionOrder is a Spring Component injected
    PermissionOrder permissionOrder = new PermissionOrder(); 
    List<String> orderedPermissions = permissionOrder.getPermissionOrder();

    // Create role and permission information
    Set<RoleInfo> roleInfos = new HashSet<>();
    for (UserRole userRole : user.getUserRoles()) {
        Role role = userRole.getRole();
        RoleInfo roleInfo = new RoleInfo(role.getRoleRid(), role.getRoleName());

        // Get permissions and sort them based on the ordered list
        Set<PermissionInfo> permissionInfos = role.getRolePermissions().stream()
                .map(rolePermission -> {
                    Permission permission = rolePermission.getPermission();
                    return new PermissionInfo(permission.getPermissionRid(), permission.getPermissionName());
                })
                .sorted((p1, p2) -> {
                    int index1 = orderedPermissions.indexOf(p1.getPermissionName());
                    int index2 = orderedPermissions.indexOf(p2.getPermissionName());
                    return Integer.compare(index1, index2);
                })
                .collect(Collectors.toCollection(LinkedHashSet::new)); // Maintain insertion order

        roleInfo.setPermissions(permissionInfos);
        roleInfos.add(roleInfo);
    }
}
