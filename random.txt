import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.List;

@Service
public class RXSOTProjectDetailService {

    @Autowired
    private RXSOTProjectDetailRepository projectDetailRepository;

    public List<RXSOTProjectDetail> searchProjects(RXSOTProjectDetailSearchDTO searchDTO) {
        if (isSearchCriteriaEmpty(searchDTO)) {
            // If no search criteria, return all results sorted by createdDate descending
            return projectDetailRepository.findAll(Sort.by(Sort.Direction.DESC, "createdDate"));
        } else {
            // Use the Specification to filter results
            Specification<RXSOTProjectDetail> spec = buildSpecification(searchDTO);
            return projectDetailRepository.findAll(spec);
        }
    }

    private boolean isSearchCriteriaEmpty(RXSOTProjectDetailSearchDTO searchDTO) {
        return searchDTO.getFromDate() == null &&
               searchDTO.getToDate() == null &&
               (searchDTO.getByUser() == null || searchDTO.getByUser().isEmpty()) &&
               (searchDTO.getByClient() == null || searchDTO.getByClient().isEmpty()) &&
               searchDTO.getLoggedInUserId() == null &&
               (searchDTO.getProjectCode() == null || searchDTO.getProjectCode().isEmpty()) &&
               (searchDTO.getProjectStatus() == null || searchDTO.getProjectStatus().isEmpty()) &&
               (searchDTO.getIsHierarchy() == null || searchDTO.getIsHierarchy().isEmpty());
    }

    private Specification<RXSOTProjectDetail> buildSpecification(RXSOTProjectDetailSearchDTO searchDTO) {
        return (Root<RXSOTProjectDetail> root, CriteriaQuery<?> query, CriteriaBuilder criteriaBuilder) -> {
            Predicate predicate = criteriaBuilder.conjunction();
            
            if (searchDTO.getFromDate() != null) {
                predicate = criteriaBuilder.and(predicate, criteriaBuilder.greaterThanOrEqualTo(root.get("createdDate"), searchDTO.getFromDate()));
            }
            if (searchDTO.getToDate() != null) {
                predicate = criteriaBuilder.and(predicate, criteriaBuilder.lessThanOrEqualTo(root.get("createdDate"), searchDTO.getToDate()));
            }
            if (searchDTO.getByUser() != null && !searchDTO.getByUser().isEmpty()) {
                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("byUser"), searchDTO.getByUser()));
            }
            if (searchDTO.getByClient() != null && !searchDTO.getByClient().isEmpty()) {
                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("byClient"), searchDTO.getByClient()));
            }
            if (searchDTO.getLoggedInUserId() != null) {
                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("loggedInUserId"), searchDTO.getLoggedInUserId()));
            }
            if (searchDTO.getProjectCode() != null && !searchDTO.getProjectCode().isEmpty()) {
                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("projectCode"), searchDTO.getProjectCode()));
            }
            if (searchDTO.getProjectStatus() != null && !searchDTO.getProjectStatus().isEmpty()) {
                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("projectStatus"), searchDTO.getProjectStatus()));
            }
            if (searchDTO.getIsHierarchy() != null && !searchDTO.getIsHierarchy().isEmpty()) {
                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get("isHierarchy"), searchDTO.getIsHierarchy()));
            }
            
            return predicate;
        };
    }
}
