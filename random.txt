  public List<String> getOrderedPermissions() {
        // Split the permissions string, trim each item to remove spaces, and collect into a list
        return Arrays.stream(permissionOrder.split(","))
                     .map(String::trim)  // Trim spaces around each permission
                     .collect(Collectors.toList());
    }
	
	
	
	@Autowired
private PermissionOrderLoader permissionOrderLoader;

public Set<RoleInfo> getRoleInfos(User user) {
    // Fetch the ordered list of permissions from the properties file
    List<String> orderedPermissions = permissionOrderLoader.getOrderedPermissions();
    
    Comparator<PermissionInfo> permissionComparator = Comparator.comparingInt(
        permission -> orderedPermissions.indexOf(permission.getPermissionName())
    );

    // Create role and permission information
    Set<RoleInfo> roleInfos = new HashSet<>();
    for (UserRole userRole : user.getUserRoles()) {
        Role role = userRole.getRole();
        RoleInfo roleInfo = new RoleInfo(role.getRoleRid(), role.getRoleName());
        
        Set<PermissionInfo> permissionInfos = role.getRolePermissions().stream()
                .map(rolePermission -> {
                    Permission permission = rolePermission.getPermission();
                    return new PermissionInfo(permission.getPermissionRid(), permission.getPermissionName());
                })
                .sorted(permissionComparator)  // Sort the permissions based on the order from properties file
                .collect(Collectors.toCollection(LinkedHashSet::new)); // Use LinkedHashSet to maintain the order
        
        roleInfo.setPermissions(permissionInfos);
        roleInfos.add(roleInfo);
    }
    return roleInfos;
}
