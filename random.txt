@Service
public class UserService {

    @Autowired
    private UserDao userDao;

    public Set<User> getUsersByManagerId(Integer managerId, boolean isHierarchy) {
        Set<User> users = new HashSet<>(); // Use a Set to track unique User objects

        // Fetch the manager itself and add to the set if they have the 'Auditor' role
        User manager = userDao.findById(managerId).orElse(null);
        if (manager != null && hasAuditorRole(manager)) {
            users.add(manager); // Add manager if they are an Auditor
        }

        if (isHierarchy) {
            fetchUsersInHierarchy(managerId, users); // Pass the Set to avoid duplicates
        } else {
            List<User> immediateUsers = userDao.findImmediateAuditorsUnderManager(managerId);
            users.addAll(immediateUsers); // Add all immediate users who are auditors
        }

        return users; // Return the Set of User objects
    }

    private void fetchUsersInHierarchy(Integer managerId, Set<User> users) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(managerId);

        while (!queue.isEmpty()) {
            Integer currentManagerId = queue.poll();
            List<User> immediateUsers = userDao.findAuditorsUnderManagerHierarchy(currentManagerId);

            for (User user : immediateUsers) {
                if (users.add(user)) { // Add the User object to the set (Set ensures uniqueness)
                    if (user.getUserRoles().stream().anyMatch(role -> "Manager".equals(role.getRole().getRoleName()))) {
                        queue.add(user.getUserRid());
                    }
                }
            }
        }
    }

    private boolean hasAuditorRole(User user) {
        return user.getUserRoles().stream().anyMatch(role -> "Auditor".equals(role.getRole().getRoleName()));
    }
}
