@Service
public class UserService {

    @Autowired
    private UserDao userDao;

    public List<User> getUsersByManagerId(Integer managerId, boolean isHierarchy) {
        List<User> users = new ArrayList<>();

        // Fetch the manager itself
        User manager = userDao.findById(managerId).orElse(null);
        if (manager != null && hasAuditorRole(manager)) {
            users.add(manager); // Add manager if it has 'Auditor' role
        }

        if (isHierarchy) {
            users.addAll(fetchUsersInHierarchy(managerId));
        } else {
            users.addAll(userDao.findImmediateAuditorsUnderManager(managerId));
        }

        return users;
    }

    private List<User> fetchUsersInHierarchy(Integer managerId) {
        List<User> allAuditors = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(managerId);

        while (!queue.isEmpty()) {
            Integer currentManagerId = queue.poll();
            List<User> immediateUsers = userDao.findAuditorsUnderManagerHierarchy(currentManagerId);

            for (User user : immediateUsers) {
                if (!allAuditors.contains(user)) {
                    allAuditors.add(user);
                    // Add subordinates to the queue if they have the 'Manager' role
                    if (user.getUserRoles().stream().anyMatch(role -> "Manager".equals(role.getRoleName()))) {
                        queue.add(user.getUserRid());
                    }
                }
            }
        }
        return allAuditors;
    }

    private boolean hasAuditorRole(User user) {
        return user.getUserRoles().stream().anyMatch(role -> "Auditor".equals(role.getRoleName()));
    }
}
