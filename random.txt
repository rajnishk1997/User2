// Fetch the user by their unique ID
    Optional<User> findByUserRid(int userRid);
	
	
	 public Set<String> getLoggedInUserRoles(int userRid) {
        // Fetch the user based on the provided user ID
        Optional<User> userOptional = userDao.findByUserRid(userRid);
        
        if (userOptional.isPresent()) {
            User user = userOptional.get();
            
            // Extract role names from userRoles
            Set<String> roleNames = user.getUserRoles().stream()
                .map(userRole -> userRole.getRole().getRoleName())
                .collect(Collectors.toSet());
                
            return roleNames;
        }
        return Collections.emptySet();
    }
	
	
	
	   // API to get roles of the user based on userRid
    @GetMapping("/{userRid}/roles")
    public ResponseEntity<Set<String>> getUserRoles(@PathVariable int userRid) {
        // Fetch the roles based on the user ID
        Set<String> roles = userService.getLoggedInUserRoles(userRid);
        
        if (roles.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Collections.emptySet());
        }
        
        return ResponseEntity.ok(roles);
    }
	
	
	
	