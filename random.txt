@RestController
@RequestMapping("/roles")
public class RoleController {

    @Autowired
    private RolePermissionService rolePermissionService;

    @PostMapping("/{roleId}/permissions")
    public ResponseEntity<RoleInfo> mapPermissionsToRole(
            @PathVariable int roleId,
            @RequestBody RoleInfo roleInfo,
            Principal principal) {

        try {
            int currentUserRid = getCurrentUserRid(principal); // Method to get current user ID

            // Extract permissions from RoleInfo
            List<PermissionInfo> permissionInfos = new ArrayList<>(roleInfo.getPermissions());

            // Convert PermissionInfo to PermissionDTO for service method
            List<PermissionDTO> permissionDTOs = permissionInfos.stream()
                    .map(permissionInfo -> new PermissionDTO(permissionInfo.getPermissionRid(), permissionInfo.getPermissionName()))
                    .collect(Collectors.toList());

            // Call service method to map permissions to role
            RoleInfo updatedRoleInfo = rolePermissionService.mapPermissionsToRole(roleId, permissionDTOs, currentUserRid);

            return ResponseEntity.ok(updatedRoleInfo);
        } catch (Exception e) {
            // Handle exceptions
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                 .body(null); // You can return an error response or handle differently as needed
        }
    }

    // Helper method to get current user ID from Principal
    private int getCurrentUserRid(Principal principal) {
        // Implementation depends on how you retrieve the current user's ID
        // For example:
        // return userService.findUserIdByUsername(principal.getName());
        return 0; // Placeholder, replace with actual logic
    }
}
