   @Autowired
    private RXSOTProjectDetailDao projectDetailDao;  // DAO for RXSOTProjectDetail

    public List<User> getAuditorReportees(int managerId) {
        List<User> result = new ArrayList<>();
        fetchAuditorReportees(managerId, result);
        return result;
    }

    private void fetchAuditorReportees(int managerId, List<User> result) {
        List<User> directReportees = userDao.findByManagerId(managerId);
        for (User reportee : directReportees) {
            if (isAuditor(reportee.getUserName())) {
                result.add(reportee);
                fetchAuditorReportees(reportee.getUserRid(), result);
            }
        }
    }
	
--------------------------------	
	@Service
public class ProjectStatusService {

    @Autowired
    private RXSOTProjectDetailDao projectDetailDao;  // DAO for RXSOTProjectDetail

    public AuditorTotalWorkflowCountDTO getWorkflowCounts(List<User> reportees) {
        AuditorTotalWorkflowCountDTO dto = new AuditorTotalWorkflowCountDTO();
        Map<Integer, AuditorReportReponseDTO> reporteeMap = new HashMap<>();

        for (User reportee : reportees) {
            AuditorReportReponseDTO reportResponse = new AuditorReportReponseDTO();
            reportResponse.setReporteeName(reportee.getUserName());
            reportResponse.setManagerName(userDao.findByUserRid(reportee.getManager().getUserRid()).getUserName());

            Map<String, Integer> statusCount = projectDetailDao.countProjectStatuses(reportee.getUserRid());
            reportResponse.setPending(statusCount.getOrDefault("PENDING", 0));
            reportResponse.setWip(statusCount.getOrDefault("WIP", 0));
            reportResponse.setClosed(statusCount.getOrDefault("CLOSED", 0));
            reportResponse.setSendToBom(statusCount.getOrDefault("SENDTOBOM", 0));

            reporteeMap.put(reportee.getUserRid(), reportResponse);
        }

        dto.setAuditorReportReponse(new ArrayList<>(reporteeMap.values()));
        dto.setTotalPending(dto.getAuditorReportReponse().stream().mapToInt(AuditorReportReponseDTO::getPending).sum());
        dto.setTotalClosed(dto.getAuditorReportReponse().stream().mapToInt(AuditorReportReponseDTO::getClosed).sum());
        dto.setTotalwip(dto.getAuditorReportReponse().stream().mapToInt(AuditorReportReponseDTO::getWip).sum());

        return dto;
    }
}

--------------------------------------------------
  @GetMapping("/report/{managerId}")
    public ResponseEntity<ResponseWrapper<AuditorTotalWorkflowCountDTO>> getAuditorsReportForManager(@PathVariable int managerId) {
        List<User> reporteeList = userService.getAuditorReportees(managerId);
        AuditorTotalWorkflowCountDTO dto = projectStatusService.getWorkflowCounts(reporteeList);

        ResponseWrapper<AuditorTotalWorkflowCountDTO> responseWrapper = new ResponseWrapper<>(dto);
        return ResponseEntity.ok(responseWrapper);
    }
	
----------------------------------------------------------
