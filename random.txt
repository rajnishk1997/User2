@Query("SELECT u FROM User u WHERE u.isNewUser = false AND u.manager.userRid = :managerId " +
       "AND EXISTS (SELECT r FROM u.userRoles r WHERE r.roleName = 'Auditor') " +
       "OR u.userRid = :managerId AND EXISTS (SELECT r FROM u.userRoles r WHERE r.roleName = 'Auditor')")
List<User> findAuditorsUnderManagerHierarchy(@Param("managerId") Integer managerId);

@Query("SELECT u FROM User u WHERE u.isNewUser = false AND u.manager.userRid = :managerId " +
       "AND EXISTS (SELECT r FROM u.userRoles r WHERE r.roleName = 'Auditor') " +
       "OR u.userRid = :managerId AND EXISTS (SELECT r FROM u.userRoles r WHERE r.roleName = 'Auditor')")
List<User> findImmediateAuditorsUnderManager(@Param("managerId") Integer managerId);


@Service
public class UserService {

    @Autowired
    private UserDao userDao;

    public List<User> getUsersByManagerId(Integer managerId, boolean isHierarchy) {
        if (isHierarchy) {
            return fetchUsersInHierarchy(managerId);
        } else {
            return userDao.findImmediateAuditorsUnderManager(managerId);
        }
    }

    private List<User> fetchUsersInHierarchy(Integer managerId) {
        List<User> allAuditors = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(managerId);

        while (!queue.isEmpty()) {
            Integer currentManagerId = queue.poll();
            List<User> immediateUsers = userDao.findAuditorsUnderManagerHierarchy(currentManagerId);

            for (User user : immediateUsers) {
                if (!allAuditors.contains(user)) {
                    allAuditors.add(user);
                    if (user.getUserRoles().stream().anyMatch(role -> "Manager".equals(role.getRoleName()))) {
                        queue.add(user.getUserRid());
                    }
                }
            }
        }
        return allAuditors;
    }
}


public List<User> searchUsersWithProjectStatus(List<User> users, String projectStatus) {
    CriteriaBuilder cb = entityManager.getCriteriaBuilder();
    CriteriaQuery<User> query = cb.createQuery(User.class);
    Root<User> userRoot = query.from(User.class);

    // Assuming there's a 'projectStatus' field in User entity
    Predicate predicate = userRoot.get("projectStatus").in(projectStatus);
    query.select(userRoot).where(cb.and(predicate, userRoot.in(users)));

    return entityManager.createQuery(query).getResultList();
}
