  @Query("SELECT u FROM User u WHERE u.isNewUser = true AND u.manager.userRid = :managerId")
    List<User> findNewUsersByManagerId(@Param("managerId") int managerId);
	
	 public List<UserDTO> getNewUsers(int managerId) {
        try {
            List<User> newUsers = userDao.findNewUsersByManagerId(managerId);
            return newUsers.stream().map(this::mapToUserDTO).collect(Collectors.toList());
        } catch (Exception e) {
            return Collections.emptyList();
        }
    }
	
	 @GetMapping("/newuser")
    public ResponseEntity<ResponseWrapper<List<UserDTO>>> getNewUsers(@RequestParam int managerId) {
        try {
            List<UserDTO> newUsers = userService.getNewUsers(managerId);
            ResponseWrapper<List<UserDTO>> responseWrapper = new ResponseWrapper<>(newUsers, new ReqRes(200, null, "Users retrieved successfully"));
            return new ResponseEntity<>(responseWrapper, HttpStatus.OK);
        } catch (Exception e) {
            ResponseWrapper<List<UserDTO>> errorResponseWrapper = new ResponseWrapper<>(null, new ReqRes(500, "Internal Server Error", "An error occurred while retrieving new users"));
            return new ResponseEntity<>(errorResponseWrapper, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }