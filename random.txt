@Service
public class ProjectTATService {

    @Autowired
    private ProjectEventDetailsRepository eventDetailsRepository;

    @Autowired
    private RXSOTProjectDetailRepository sotProjectDetailRepository;

    /**
     * Calculates and stores the overall TAT for a given SOT ID.
     * @param sotId The SOT ID for which TAT should be calculated.
     */
    public void calculateAndStoreOverallTAT(Long sotId) {
        // Fetch all events for the given SOT ID, ordered by dateTime
        List<ProjectEventDetails> events = eventDetailsRepository.findBySotIdOrderByDateTime(sotId);
        
        Date lastWipTime = null;
        long totalTATInMinutes = 0;

        // Iterate through the events to calculate TAT for each WIP event
        for (int i = 0; i < events.size(); i++) {
            ProjectEventDetails event = events.get(i);

            // If the current event is a WIP, we need to calculate its TAT
            if (event.getStatus().equals("WIP")) {
                lastWipTime = event.getDateTime(); // Capture the last WIP time

                // Try to find the next non-WIP event
                Date nextEventTime = null;
                for (int j = i + 1; j < events.size(); j++) {
                    ProjectEventDetails nextEvent = events.get(j);

                    if (!nextEvent.getStatus().equals("WIP")) {
                        nextEventTime = nextEvent.getDateTime(); // Capture the time of the next non-WIP event
                        break; // Exit after finding the first non-WIP event
                    }
                }

                // If no next event is found, use current system time as the end time
                if (nextEventTime == null) {
                    nextEventTime = new Date(); // Current system time if no non-WIP event
                }

                // Calculate the time difference between WIP and the next event (or system time)
                long durationInMillis = nextEventTime.getTime() - lastWipTime.getTime();
                long durationInMinutes = durationInMillis / (1000 * 60); // Convert to minutes

                totalTATInMinutes += durationInMinutes; // Add to the total TAT
            }
        }

        // Convert total TAT in minutes to hours and minutes (hh:mm)
        long totalHours = totalTATInMinutes / 60;
        long totalMinutes = totalTATInMinutes % 60;
        String formattedTAT = String.format("%02d:%02d", totalHours, totalMinutes);

        // Find the corresponding SOT project detail and store the total TAT
        RXSOTProjectDetail projectDetail = sotProjectDetailRepository.findBySotId(sotId);
        if (projectDetail != null) {
            projectDetail.setTAT(formattedTAT); // Store the TAT in the new field
            sotProjectDetailRepository.save(projectDetail); // Save the updated project detail
        }
    }
}




------------------------------------------

@Repository
public interface ProjectEventDetailsRepository extends JpaRepository<ProjectEventDetails, Long> {
    List<ProjectEventDetails> findBySotIdOrderByDateTimeAsc(Long sotId);
}

@Repository
public interface RXSOTProjectDetailRepository extends JpaRepository<RXSOTProjectDetail, Long> {
    Optional<RXSOTProjectDetail> findBySotId(Long sotId);
}



-----------------
    // After logging the status, calculate and store the TAT
        projectTATService.calculateAndStoreOverallTAT(request.getSotId());