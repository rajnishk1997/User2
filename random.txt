<dependencies>
    <!-- Apache POI for Excel generation -->
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>5.2.3</version> <!-- Choose the latest version -->
    </dependency>

    <!-- Jackson for JSON parsing -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.15.0</version> <!-- Choose the latest version -->
    </dependency>

    <!-- Spring Boot Web (if not already included) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
</dependencies>





package com.example.swaggerexcel;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.util.Map;

@RestController
@RequestMapping("/api/excel")
public class SwaggerController {

    @GetMapping("/export")
    public ResponseEntity<byte[]> exportToExcel() throws Exception {
        // Fetch the Swagger JSON from the endpoint
        URL url = new URL("http://localhost:8080/v2/api-docs"); // Modify the Swagger URL if needed
        InputStream inputStream = url.openStream();
        
        // Parse the Swagger JSON
        ObjectMapper objectMapper = new ObjectMapper();
        Map<String, Object> swagger = objectMapper.readValue(inputStream, Map.class);

        // Create a new workbook and sheet
        XSSFWorkbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("API Endpoints");

        // Create headers for the Excel file
        Row headerRow = sheet.createRow(0);
        headerRow.createCell(0).setCellValue("API Path");
        headerRow.createCell(1).setCellValue("Method");
        headerRow.createCell(2).setCellValue("Description");

        // Extract API details from the Swagger JSON and populate the Excel
        int rowNum = 1;
        Map<String, Map<String, Object>> paths = (Map<String, Map<String, Object>>) swagger.get("paths");

        for (String path : paths.keySet()) {
            Map<String, Object> methods = paths.get(path);

            for (String method : methods.keySet()) {
                Row row = sheet.createRow(rowNum++);
                row.createCell(0).setCellValue(path);
                row.createCell(1).setCellValue(method.toUpperCase());
                row.createCell(2).setCellValue(methods.get("description") != null ? methods.get("description").toString() : "");
            }
        }

        // Convert the Excel workbook to a byte array
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        workbook.write(outputStream);
        workbook.close();

        byte[] excelBytes = outputStream.toByteArray();

        // Set the response headers for downloading the file
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Disposition", "attachment; filename=swagger_api_endpoints.xlsx");

        return new ResponseEntity<>(excelBytes, headers, HttpStatus.OK);
    }
}
