@Query("SELECT u FROM User u WHERE " +
"(u.manager.userRid = :managerId AND EXISTS (SELECT r FROM u.userRoles ur JOIN ur.role r WHERE r.roleName IN ('Auditor', 'Manager'))) " +
"OR (u.userRid = :managerId AND EXISTS (SELECT r FROM u.userRoles ur JOIN ur.role r WHERE r.roleName = 'Auditor'))")
List<User> findAuditorsAndManagersUnderHierarchy(@Param("managerId") Integer managerId);



private void fetchUsersInHierarchyRecursive(Integer managerId, Set<User> users) {
    // Fetch the immediate users under the manager (both auditors and managers)
    List<User> immediateUsers = userDao.findAuditorsAndManagersUnderHierarchy(managerId);

    for (User user : immediateUsers) {
        // Add the user if not already present in the set (ensures no duplicates)
        if (users.add(user)) {
            // Check if the user is a manager
            if (user.getUserRoles().stream().anyMatch(role -> "Manager".equals(role.getRole().getRoleName()))) {
                // Recursively fetch subordinates of the manager
                fetchUsersInHierarchyRecursive(user.getUserRid(), users);
            }
        }
    }
}
