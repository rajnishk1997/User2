 @Transactional
    public RoleInfo mapPermissionsToRole(int roleId, List<PermissionDTO> permissionDTOs, int currentUserRid) {
        Role role = roleRepository.findById(roleId).orElseThrow(() -> new RuntimeException("Role not found"));
        Set<Permission> permissions = permissionDTOs.stream()
                .map(dto -> permissionRepository.findById(dto.getPermissionRid()).orElseThrow(() -> new RuntimeException("Permission not found")))
                .collect(Collectors.toSet());

        role.setPermissions(permissions);
        roleRepository.save(role);

        List<String> permissionNames = permissions.stream()
                .map(Permission::getPermissionName)
                .collect(Collectors.toList());

        // Format the permission details for logging
        String permissionDetails = permissions.stream()
                .map(permission -> String.format("%s (ID: %d)", permission.getPermissionName(), permission.getPermissionRid()))
                .collect(Collectors.joining(", "));

        // Log the audit trail
        String logDetails = String.format("Role Name: %s and Associated Permissions: %s", role.getRoleName(), permissionDetails);
        logAuditTrailWithUsername("MAP_PERMISSIONS", "SUCCESS", logDetails, currentUserRid, LocalDateTime.now());

        return new RoleInfo(role.getRoleRid(), role.getRoleName(), permissions.stream()
                .map(permission -> new PermissionInfo(permission.getPermissionRid(), permission.getPermissionName()))
                .collect(Collectors.toSet()));
    }