public class LocationDTO {
    private Long locationId;
    private String locationName;

    public LocationDTO(Long locationId, String locationName) {
        this.locationId = locationId;
        this.locationName = locationName;
    }
}
-------------------
@Service
public class LocationService {

    private final LocationRepository locationRepository;

    public LocationService(LocationRepository locationRepository) {
        this.locationRepository = locationRepository;
    }

    public List<LocationDTO> getAllLocations() {
        // Fetch all locations from the database and map to simplified DTO
        return locationRepository.findAll()
                .stream()
                .map(location -> new LocationDTO(
                        location.getRxLocId(),
                        location.getRxLocName()
                ))
                .collect(Collectors.toList());
    }
}

-------------------
@RestController
@RequestMapping("/api/locations")
public class LocationController {

    private final LocationService locationService;

    public LocationController(LocationService locationService) {
        this.locationService = locationService;
    }

    @GetMapping
    public ResponseEntity<ResponseWrapper<List<LocationDTO>>> getAllLocations() {
        try {
            // Fetch all locations from the service
            List<LocationDTO> locations = locationService.getAllLocations();

            // Prepare successful response
            ResponseWrapper<List<LocationDTO>> response = new ResponseWrapper<>(
                    locations,
                    new ReqRes("00", "Success")
            );

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            // Handle exceptions and prepare error response
            ResponseWrapper<List<LocationDTO>> response = new ResponseWrapper<>(
                    null,
                    new ReqRes("99", "Failed to fetch locations: " + e.getMessage())
            );

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }
}
