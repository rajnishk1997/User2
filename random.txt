@Query("SELECT new ClosedCountResponseDTO(p.createdDateTime, COUNT(p), p.userMISId) " +
       "FROM RXSOTProjectDetail p " +
       "WHERE p.userMISId IN :userMISIds AND p.validationStatus = 'CLOSED' " +
       "AND p.createdDateTime BETWEEN :fromDate AND :toDate " +
       "GROUP BY p.createdDateTime, p.userMISId")



// Fetch subordinates based on hierarchy
Set<User> reporteeList = allAuditorListService.getUsersByManagerId(managerId, isHierarchy);

// Extract the userMISIds (userNames) from the reporteeList
Set<String> userMISIds = reporteeList.stream()
                                      .map(User::getUserName)  // Assuming `userName` corresponds to userMISId
                                      .collect(Collectors.toSet());

// Fetch closed counts from RXSOTProjectDetail
List<ClosedCountResponseDTO> closedCountList = rxsotProjectDetailDao.fetchClosedCountsForUsersAndDateRange(
    userMISIds, fromDate, toDate);
