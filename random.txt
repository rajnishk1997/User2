import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.transaction.annotation.Transactional;
import com.optum.dao.PermissionDao;
import com.optum.entity.Permission;

import javax.annotation.PostConstruct;
import java.util.*;
import java.util.stream.Collectors;

@Configuration
@PropertySource({"classpath:application.properties", "classpath:permission.properties"})
public class PermissionConfig {

    private final PermissionDao permissionRepository;

    @Value("${permissions}")
    private String permissions;

    private List<IndexedPermission> indexedPermissions;

    public PermissionConfig(PermissionDao permissionRepository) {
        this.permissionRepository = permissionRepository;
    }

    @PostConstruct
    @Transactional
    public void init() {
        List<String> permissionNames = Arrays.asList(permissions.split(", "));
        indexedPermissions = new ArrayList<>();
        
        for (int i = 0; i < permissionNames.size(); i++) {
            String permissionName = permissionNames.get(i);
            Permission permission = permissionRepository.findByPermissionName(permissionName);
            if (permission == null) {
                permission = new Permission(permissionName);
                permissionRepository.save(permission);
            }
            indexedPermissions.add(new IndexedPermission(i, permission.getPermissionName()));
        }
    }

    public List<IndexedPermission> getOrderedPermissions() {
        return indexedPermissions;
    }

    public static class IndexedPermission {
        private final int index;
        private final String name;

        public IndexedPermission(int index, String name) {
            this.index = index;
            this.name = name;
        }

        public int getIndex() {
            return index;
        }

        public String getName() {
            return name;
        }
    }
}




import java.util.*;
import java.util.stream.Collectors;

public void createRoleAndPermissionInfo(User user) {
    // Get the ordered permissions from PermissionConfig
    List<PermissionConfig.IndexedPermission> orderedPermissions = permissionConfig.getOrderedPermissions();

    // Create role and permission information
    Set<RoleInfo> roleInfos = new HashSet<>();
    for (UserRole userRole : user.getUserRoles()) {
        Role role = userRole.getRole();
        RoleInfo roleInfo = new RoleInfo(role.getRoleRid(), role.getRoleName());

        // Get permissions for the current role
        List<PermissionInfo> rolePermissions = role.getRolePermissions().stream()
                .map(rolePermission -> {
                    Permission permission = rolePermission.getPermission();
                    return new PermissionInfo(permission.getPermissionRid(), permission.getPermissionName());
                })
                .collect(Collectors.toList());

        // Create a list to hold permissions in the defined order
        List<IndexedPermissionInfo> orderedRolePermissions = new ArrayList<>();

        // Fill the ordered list with role permissions
        for (PermissionConfig.IndexedPermission indexedPermission : orderedPermissions) {
            String permissionName = indexedPermission.getName();
            Optional<PermissionInfo> matchingPermission = rolePermissions.stream()
                    .filter(p -> p.getPermissionName().equalsIgnoreCase(permissionName))
                    .findFirst();

            if (matchingPermission.isPresent()) {
                // Create an indexed permission info with its index
                orderedRolePermissions.add(new IndexedPermissionInfo(indexedPermission.getIndex(), permissionName));
            }
        }

        // Set the ordered permissions to the role info
        roleInfo.setPermissions(new LinkedHashSet<>(orderedRolePermissions));
        roleInfos.add(roleInfo);
    }
}
