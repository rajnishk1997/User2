import java.util.*;
import java.util.stream.Collectors;

public void createRoleAndPermissionInfo(User user) {
    // Get the ordered permissions from PermissionConfig
    List<PermissionConfig.IndexedPermission> orderedPermissions = permissionConfig.getOrderedPermissions();

    // Create role and permission information
    Set<RoleInfo> roleInfos = new HashSet<>();
    for (UserRole userRole : user.getUserRoles()) {
        Role role = userRole.getRole();
        RoleInfo roleInfo = new RoleInfo(role.getRoleRid(), role.getRoleName());

        // Get permissions for the current role
        List<PermissionInfo> rolePermissions = role.getRolePermissions().stream()
                .map(rolePermission -> {
                    Permission permission = rolePermission.getPermission();
                    return new PermissionInfo(permission.getPermissionRid(), permission.getPermissionName());
                })
                .collect(Collectors.toList());

        // Create a list to hold permissions in the defined order
        List<IndexedPermissionInfo> orderedRolePermissions = new ArrayList<>();

        // Fill the ordered list with role permissions
        for (PermissionConfig.IndexedPermission indexedPermission : orderedPermissions) {
            String permissionName = indexedPermission.getName();
            Optional<PermissionInfo> matchingPermission = rolePermissions.stream()
                    .filter(p -> p.getPermissionName().equalsIgnoreCase(permissionName))
                    .findFirst();

            if (matchingPermission.isPresent()) {
                // Create an indexed permission info with its index
                orderedRolePermissions.add(new IndexedPermissionInfo(indexedPermission.getIndex(), permissionName));
            }
        }

        // Set the ordered permissions to the role info
        roleInfo.setPermissions(new LinkedHashSet<>(orderedRolePermissions));
        roleInfos.add(roleInfo);
    }
}
