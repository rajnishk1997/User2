@Service
public class ProjectTATService {

    @Autowired
    private ProjectEventDetailsRepository eventDetailsRepository;

    @Autowired
    private RXSOTProjectDetailRepository sotProjectDetailRepository;

    /**
     * Calculates and stores the overall TAT for a given SOT ID.
     * @param sotId The SOT ID for which TAT should be calculated.
     */
    public void calculateAndStoreOverallTAT(Long sotId) {
        // Fetch all events for the given SOT ID, ordered by dateTime
        List<ProjectEventDetails> events = eventDetailsRepository.findBySotIdOrderByDateTime(sotId);
        
        Date wipStartTime = null;
        long totalTATInMinutes = 0;

        // Iterate through the events to calculate TAT for WIP periods
        for (ProjectEventDetails event : events) {
            if (event.getStatus().equals("WIP")) {
                // Start of a new WIP period
                if (wipStartTime == null) {
                    wipStartTime = event.getDateTime(); // Capture the start time
                }
            } else {
                // End of a WIP period
                if (wipStartTime != null) {
                    // Calculate the duration from WIP start to the current non-WIP event
                    long durationInMillis = event.getDateTime().getTime() - wipStartTime.getTime();
                    totalTATInMinutes += durationInMillis / (1000 * 60); // Convert to minutes
                    wipStartTime = null; // Reset for the next WIP period
                }
            }
        }

        // Handle case where the last event is still in WIP
        if (wipStartTime != null) {
            long durationInMillis = new Date().getTime() - wipStartTime.getTime();
            totalTATInMinutes += durationInMillis / (1000 * 60); // Convert to minutes
        }

        // Convert total TAT in minutes to hours and minutes (hh:mm)
        long totalHours = totalTATInMinutes / 60;
        long totalMinutes = totalTATInMinutes % 60;
        String formattedTAT = String.format("%02d:%02d", totalHours, totalMinutes);

        // Find the corresponding SOT project detail and store the total TAT
        RXSOTProjectDetail projectDetail = sotProjectDetailRepository.findBySotId(sotId);
        if (projectDetail != null) {
            projectDetail.setTAT(formattedTAT); // Store the TAT in the new field
            sotProjectDetailRepository.save(projectDetail); // Save the updated project detail
        }
    }
}
