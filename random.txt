import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public ReqRes<ValidateJsonDTO> refactorSotGppDashboardResults(String jsonString) {
    ReqRes<ValidateJsonDTO> response = new ReqRes<>();
    ValidateJsonDTO validateJsonDTO = new ValidateJsonDTO();

    try {
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(jsonString);

        // Extract and set the fields if they exist in jsonString
        if (jsonNode.has("gppJson4Matched")) {
            validateJsonDTO.setGppJson4Matched(jsonNode.get("gppJson4Matched").asInt());
        }
        if (jsonNode.has("gppJson4NotMatched")) {
            validateJsonDTO.setGppJson4NotMatched(jsonNode.get("gppJson4NotMatched").asInt());
        }
        if (jsonNode.has("gppJson4Null")) {
            validateJsonDTO.setGppJson4Null(jsonNode.get("gppJson4Null").asInt());
        }
        if (jsonNode.has("gppJson4ReValidated")) {
            validateJsonDTO.setGppJson4ReValidated(jsonNode.get("gppJson4ReValidated").asInt());
        }
        if (jsonNode.has("gppJson4NotValidated")) {
            validateJsonDTO.setGppJson4NotValidated(jsonNode.get("gppJson4NotValidated").asInt());
        }

        if (jsonNode.has("gppJson10Matched")) {
            validateJsonDTO.setGppJson10Matched(jsonNode.get("gppJson10Matched").asInt());
        }
        if (jsonNode.has("gppJson10NotMatched")) {
            validateJsonDTO.setGppJson10NotMatched(jsonNode.get("gppJson10NotMatched").asInt());
        }
        if (jsonNode.has("gppJson10Null")) {
            validateJsonDTO.setGppJson10Null(jsonNode.get("gppJson10Null").asInt());
        }
        if (jsonNode.has("gppJson10Message")) {
            validateJsonDTO.setGppJson10Message(jsonNode.get("gppJson10Message").asText());
        }

        if (jsonNode.has("gppJson28Matched")) {
            validateJsonDTO.setGppJson28Matched(jsonNode.get("gppJson28Matched").asInt());
        }
        if (jsonNode.has("gppJson28NotMatched")) {
            validateJsonDTO.setGppJson28NotMatched(jsonNode.get("gppJson28NotMatched").asInt());
        }
        if (jsonNode.has("gppJson28Null")) {
            validateJsonDTO.setGppJson28Null(jsonNode.get("gppJson28Null").asInt());
        }
        if (jsonNode.has("gppJson10MessageifCTRXnotFound")) {
            validateJsonDTO.setGppJson10MessageifCTRXnotFound(jsonNode.get("gppJson10MessageifCTRXnotFound").asText());
        }
        if (jsonNode.has("gppJson28Message")) {
            validateJsonDTO.setGppJson28Message(jsonNode.get("gppJson28Message").asText());
        }

        // Set response object
        response.setStatusCode(200);
        response.setError(null);
        response.setMessage("Successfully processed the JSON data.");
        response.setData(validateJsonDTO);

    } catch (Exception e) {
        response.setStatusCode(500);
        response.setError("Error processing JSON data");
        response.setMessage(e.getMessage());
        response.setData(null);
    }

    return response;
}
