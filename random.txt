UESR:
 @ManyToMany
    @JoinTable(
        name = "UserNetworkType",
        joinColumns = @JoinColumn(name = "user_id"),
        inverseJoinColumns = @JoinColumn(name = "network_type_id")
    )
    private Set<NetworkType> networkTypes = new HashSet<>();
	
	  public void setNetworkTypes(Set<NetworkType> networkTypes) {
        this.networkTypes = networkTypes;
    }

    public Set<NetworkType> getNetworkTypes() {
        return networkTypes;
    }
	
	NetworkType
	 @ManyToMany(mappedBy = "networkTypes")
    private Set<User> users = new HashSet<>();
	
	mapToUserDTO:
	  userDTO.setNetworkType(user.getNetworkTypes().stream()
        .map(this::mapToNetworkTypeDTO)
        .collect(Collectors.toList()));
		
		private NetworkTypeDTO mapToNetworkTypeDTO(NetworkType networkType) {
    NetworkTypeDTO networkTypeDTO = new NetworkTypeDTO();
    networkTypeDTO.setId(networkType.getId());
    networkTypeDTO.setNetworkTypeName(networkType.getNetworkTypeName());
    return networkTypeDTO;
}

REGISTER:
 // Map and set network types
        Set<NetworkType> networkTypes = userRequestDTO.getNetworkType().stream()
            .map(dto -> networkTypeDao.findById(dto.getId()).orElseThrow(() -> new IllegalArgumentException("NetworkType not found: " + dto.getId())))
            .collect(Collectors.toSet());
        user.setNetworkTypes(networkTypes);

        User savedUser = userDao.save(user);
		
		
		
		UPDATE:
		 // Update network types
    Set<NetworkType> existingNetworkTypes = user.getNetworkTypes();
    Set<NetworkType> newNetworkTypes = new HashSet<>();
    for (NetworkTypeDTO networkTypeDTO : userRequestDTO.getNetworkType()) {
        NetworkType networkType = networkTypeDao.findById(networkTypeDTO.getId()).orElseThrow(() -> {
            logger.error("NetworkType not found with id: {}", networkTypeDTO.getId());
            return new RuntimeException("NetworkType not found: " + networkTypeDTO.getId());
        });
        newNetworkTypes.add(networkType);
    }

    // Determine network types to be removed
    Set<NetworkType> networkTypesToRemove = new HashSet<>(existingNetworkTypes);
    networkTypesToRemove.removeAll(newNetworkTypes);

    // Remove network types not present in newNetworkTypes
    logger.info("Removing network types not present in newNetworkTypes for user: {}", userName);
    for (NetworkType networkType : networkTypesToRemove) {
        existingNetworkTypes.remove(networkType);
        networkType.getUsers().remove(user);
        networkTypeDao.save(networkType);
        logger.info("Removed NetworkType: {}", networkType);
    }

    // Determine network types to be added
    Set<NetworkType> networkTypesToAdd = new HashSet<>(newNetworkTypes);
    networkTypesToAdd.removeAll(existingNetworkTypes);

    // Add new network types
    logger.info("Adding new network types for user: {}", userName);
    for (NetworkType networkType : networkTypesToAdd) {
        existingNetworkTypes.add(networkType);
        networkType.getUsers().add(user);
        networkTypeDao.save(networkType);
        logger.info("Added NetworkType: {}", networkType);
    }

    user.setNetworkTypes(existingNetworkTypes);

    // Save updated user
    userDao.save(user);
    logger.info("User updated successfully: {}", userName);