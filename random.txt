@Query("SELECT u FROM User u WHERE " +
"(u.manager.userRid = :managerId AND " +
"EXISTS (SELECT r FROM u.userRoles ur JOIN ur.role r WHERE r.roleName = 'Auditor')) " +
"OR (u.userRid = :managerId AND EXISTS (SELECT r FROM u.userRoles ur JOIN ur.role r WHERE r.roleName = 'Auditor'))")
List<User> findAuditorsUnderManagerHierarchy(@Param("managerId") Integer managerId);



private void fetchUsersInHierarchyRecursive(Integer managerId, Set<User> users) {
    // Fetch the immediate users under the manager
    List<User> immediateUsers = userDao.findAuditorsUnderManagerHierarchy(managerId);

    for (User user : immediateUsers) {
        // Check if the user has an Auditor role
        boolean hasAuditorRole = user.getUserRoles().stream()
                .anyMatch(role -> "Auditor".equals(role.getRole().getRoleName()));

        // Only add the user if they are an Auditor or they are a Manager with an Auditor role
        if (hasAuditorRole || user.getUserRoles().stream().anyMatch(role -> "Manager".equals(role.getRole().getRoleName()))) {
            if (users.add(user)) {
                // If the user is a Manager, recurse into their hierarchy
                if (user.getUserRoles().stream().anyMatch(role -> "Manager".equals(role.getRole().getRoleName()))) {
                    fetchUsersInHierarchyRecursive(user.getUserRid(), users);
                }
            }
        }
    }
}
